#+title: TKRM
#+startup: showeverything
#+property: header-args :noweb yes :mkdirp yes

* Introduction

* REPL (笑)

First some imports:
#+BEGIN_SRC c++ :tangle repl.cc
#include <string>
#include <iostream>
#include <utility>
#+END_SRC

Although the REPL is conceptually a very simple loop, to make it a bit nicer
let's abstract the input, output, and processing steps into something like a
generator:

#+BEGIN_SRC c++ :tangle repl.cc
struct show_prompt {
  show_prompt(std::ostream &sout, std::string prompt_string)
    : sout_{&sout}, prompt_string_{std::move(prompt_string)} {}
  void operator()() { *sout_ << prompt_string_; }
  explicit operator bool() { return !!*sout_; }

private:
  std::ostream *sout_;
  std::string prompt_string_;
};

struct read_input {
  read_input(std::istream &sin) : sin_{&sin}, line_{} {}

  std::string operator()() {
    std::getline(*sin_, line_);
    return line_;
  }

  explicit operator bool() { return !!*sin_; }

private:
  std::istream *sin_;
  std::string line_;
};

struct print_string {
  print_string(std::ostream &sout) : sout_{&sout} {}
  void operator()(std::string s) { *sout_ << s << std::endl; }
  explicit operator bool() { return !!*sout_; }

private:
  std::ostream *sout_;
};
#+END_SRC

Then we will want some way to combine them:
#+BEGIN_SRC c++ :tangle repl.cc
template <typename F1, typename F2>
struct sequencer {
  sequencer(F1 && f1, F2 && f2)
    : f1_{std::forward<F1>(f1)}, f2_{std::forward<F2>(f2)} {}
  void operator()() {f1_(); f2_();}
  explicit operator bool() { return !!f1_ && !!f2_; }

private:
  F1 f1_;
  F2 f2_;
};

template <typename F1, typename F2>
auto seq(F1 && f1, F2 && f2) {
  return sequencer<F1,F2>(std::forward<F1>(f1), std::forward<F2>(f2));
}


template <typename F1, typename F2>
struct binder {
  binder(F1 && f1, F2 && f2)
    : f1_{std::forward<F1>(f1)}, f2_{std::forward<F2>(f2)} {}
  auto operator()() { f2_(f1_()); }
  explicit operator bool() { return !!f1_ && !!f2_; }

private:
  F1 f1_;
  F2 f2_;
};

template <typename F1, typename F2>
auto bind(F1 && f1, F2 && f2) {
  return binder<F1,F2>(std::forward<F1>(f1), std::forward<F2>(f2));
}
#+END_SRC

These are kind of like a very ad-hoc version of monadic operations in the IO
monad in Haskell. At some point it may be beneficial to use a real functional programming library,
but for now it serves our purpose.

Finally we can build the ``REPL'' (it's more like a ``RPL'') out of these pieces:

#+BEGIN_SRC c++ :tangle repl.cc
int main() {
  auto loop = seq(show_prompt{std::cout, "Enter something\n> "},
                  bind(read_input{std::cin},
                       print_string{std::cout}));
  while(loop) loop();
  return 0;
}
#+END_SRC

* Infrastructure

** Build System

This software is written in C++ and built using CMake.

*** Main Project

#+BEGIN_SRC cmake :tangle CMakeLists.txt
cmake_minimum_required(VERSION 2.8)
project(tkrm CXX)

if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++1z -stdlib=libc++ -fmodules")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lc++abi")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -lc++abi")
  set(CMAKE_CXX_FLAGS_DEBUG "-O0 -fno-inline -g3 -fstack-protector-all")
  set(CMAKE_CXX_FLAGS_RELEASE "-Ofast -g0 -march=native -mtune=native -DNDEBUG")
else()
  message(FATAL_ERROR "Use Clang!")
endif()

<<executables>>
#+END_SRC

*** Example Program

This is an example program, to test compiling with the build system.
It prints out “Hello, world!”.

#+BEGIN_SRC c++ :tangle example/main.cc
#include <iostream>

int main()
{
  std::cout << "Hello, world!" << std::endl;
  return 0;
}
#+END_SRC

To build it, we need to add it to the list of exectuables in our CMake file:

#+BEGIN_SRC cmake :noweb-ref executables
add_executable(hello example/main.cc)
#+END_SRC

*** Build the ``REPL'' program

#+BEGIN_SRC cmake :noweb-ref executables
add_executable(repl repl.cc)
#+END_SRC

*** Setting up a build

To set up a build for the first time on a new machine (or to rebuild
from a clean slate), tangle this file and then run the following code
block:

#+BEGIN_SRC sh :results verbatim
#!/bin/sh

rm -rf build
mkdir build
cd build
cmake .. -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
#+END_SRC

#+RESULTS:
#+begin_example
-- The CXX compiler identification is Clang 3.6.0
-- Check for working CXX compiler: /usr/bin/clang++
-- Check for working CXX compiler: /usr/bin/clang++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /home/joseph/Git/tkrm/build
#+end_example

You should see the results with the output from CMake.

** Git Ignore

This =.org= file is used to generate all the source files and support
files for this package, so we generate a =.gitignore= file that simply
ignores all files except this one, including the =.gitignore= file
itself! (I got this idea from [[http://gittup.org/tup/][tup]].)

Any other files which are created outside this =.org= file and need to
be added to source control should be appended below on a line
beginning with ‘!’.

#+BEGIN_SRC fundamental :tangle .gitignore
*
!tkrm.org
!README.md
!COPYING
#+END_SRC
